
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // USERS
    // Users can read their own user document.
    // Anyone can create their own user document during sign-up.
    // Users can only update their own username.
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.keys().hasAny(['username', 'profile']);
    }

    // PROFILES (Homeowner & Shop Owner)
    // Users can read/write their own profile.
    // Shop owner profiles are public to all logged-in users.
    match /homeownerProfiles/{userId} {
      allow read, write: if isOwner(userId);
    }
    match /shopOwnerProfiles/{userId} {
      allow write: if isOwner(userId);
      allow read: if request.auth != null;
    }

    // REQUIREMENTS
    // Homeowners can create, read, update, delete their own requirements.
    // Shop owners can read all 'Open' requirements.
    match /requirements/{requirementId} {
      allow create: if request.auth != null && request.resource.data.homeownerId == request.auth.uid;
      allow read: if (resource.data.homeownerId == request.auth.uid) || (resource.data.status == 'Open');
      allow update, delete: if request.auth != null && resource.data.homeownerId == request.auth.uid;
    }

    // QUOTATIONS
    // Shop owners can create quotations for requirements.
    // Shop owners can only update/delete their own quotations.
    // Homeowners can read quotations for their own requirements.
    match /quotations/{quotationId} {
      allow create: if request.auth != null && request.resource.data.shopOwnerId == request.auth.uid;
      allow read: if (resource.data.shopOwnerId == request.auth.uid) || isRequirementOwner(resource.data.requirementId);
      allow update, delete: if request.auth != null && resource.data.shopOwnerId == request.auth.uid;
    }

    // Helper function to check if the current user owns the requirement linked to a quotation.
    function isRequirementOwner(requirementId) {
      return exists(/databases/$(database)/documents/requirements/$(requirementId)) &&
             get(/databases/$(database)/documents/requirements/$(requirementId)).data.homeownerId == request.auth.uid;
    }
    
    // UPDATES
    // Any authenticated user can read all updates.
    // Any authenticated user can create an update.
    // Users can only update/delete their own updates.
    match /updates/{updateId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if request.auth != null && resource.data.authorId == request.auth.uid;
    }
  }
}
