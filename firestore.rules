
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USER & PROFILE RULES
    match /users/{userId} {
      // READ: Any authenticated user can read their own user document.
      allow read: if isSignedIn() && isOwner(userId);

      // CREATE: A new user can create their own user document during sign-up.
      allow create: if isOwner(userId);
      
      // UPDATE: A user can only update their own username. Role and email are immutable.
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username']);
    }

    match /homeownerProfiles/{userId} {
      // READ: A user can read their own profile.
      allow read: if isSignedIn() && isOwner(userId);
      // CREATE: A user can create their own profile upon registration.
      allow create: if isSignedIn() && isOwner(userId);
      // UPDATE: A user can update their own profile.
      allow update: if isSignedIn() && isOwner(userId);
    }
    
    match /shopOwnerProfiles/{userId} {
       // READ: A user can read their own profile. Homeowners can read any shop owner profile.
      allow read: if isSignedIn();
      // CREATE: A user can create their own profile upon registration.
      allow create: if isSignedIn() && isOwner(userId);
      // UPDATE: A user can update their own profile.
      allow update: if isSignedIn() && isOwner(userId);
    }

    // REQUIREMENT RULES
    match /requirements/{requirementId} {
      // READ: Any authenticated user can read requirements (for the feed).
      allow read: if isSignedIn();
      
      // CREATE: Only authenticated homeowners can create requirements.
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.homeownerId;

      // UPDATE: Only the homeowner who created it can update it.
      allow update: if isSignedIn() && isOwner(resource.data.homeownerId);
      
      // DELETE: Only the homeowner who created it can delete it.
      allow delete: if isSignedIn() && isOwner(resource.data.homeownerId);
    }
    
    // QUOTATION RULES
    match /quotations/{quotationId} {
      // READ: Only the shop owner who made the quote or the homeowner who owns the requirement can read it.
      allow read: if isSignedIn() && (isOwner(resource.data.shopOwnerId) || isOwner(get(/databases/$(database)/documents/requirements/$(resource.data.requirementId)).data.homeownerId));
      
      // CREATE: Only an authenticated user can create a quotation.
      allow create: if isSignedIn() && isOwner(request.resource.data.shopOwnerId);
      
      // UPDATE: Only the shop owner who created it can update it.
      allow update: if isSignedIn() && isOwner(resource.data.shopOwnerId);
      
      // DELETE: No one can delete quotations for record-keeping.
      allow delete: if false;
    }
    
    // UPDATES FEED RULES
    match /updates/{updateId} {
       // READ: Any authenticated user can read updates.
       allow read: if isSignedIn();
       
       // CREATE: Any authenticated user can create an update.
       allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
       
       // UPDATE, DELETE: Only the author can update or delete their own post.
       allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);
    }
  }
}
