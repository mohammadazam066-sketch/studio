rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users can only read their own user document.
    // Creating a user doc is handled by the backend during registration.
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create, update, delete: if false; // Disallow client-side modification
    }

    // Profiles can be read by anyone.
    // Users can only create/update their own profile.
    match /homeownerProfiles/{userId} {
      allow read: if true;
      allow create, update: if isOwner(userId);
      allow delete: if false;
    }

    match /shopOwnerProfiles/{userId} {
      allow read: if true;
      allow create, update: if isOwner(userId);
      allow delete: if false;
    }
    
    // Requirements can be read by anyone.
    // Homeowners can create/update/delete their own requirements.
    match /requirements/{requirementId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.homeownerId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.homeownerId == request.auth.uid;
    }

    // Quotations can be read by the homeowner who owns the requirement or the shop owner who made the quote.
    // Shop owners can create/update their own quotations.
    match /quotations/{quotationId} {
      allow read: if request.auth != null && 
                   (isOwner(resource.data.shopOwnerId) || get(/databases/$(database)/documents/requirements/$(resource.data.requirementId)).data.homeownerId == request.auth.uid);
      allow create: if request.auth != null && request.resource.data.shopOwnerId == request.auth.uid;
      allow update: if isOwner(resource.data.shopOwnerId);
      allow delete: if false; // Quotations cannot be deleted
    }

    // Updates can be read by anyone.
    // Users can create, update and delete their own updates.
    match /updates/{updateId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.authorId == request.auth.uid;
    }
  }
}
