rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId} {
      // Allow any authenticated user to read from the users collection.
      // This is necessary to fetch user roles and other public info.
      allow read: if request.auth != null;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && !("role" in request.resource.data);
    }

    match /homeownerProfiles/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    match /shopOwnerProfiles/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }

    match /requirements/{requirementId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.homeownerId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.homeownerId == request.auth.uid;
    }

    match /quotations/{quotationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.shopOwnerId == request.auth.uid;
      allow update: if request.auth != null && resource.data.shopOwnerId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.shopOwnerId == request.auth.uid;
    }

    match /updates/{updateId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if request.auth != null && resource.data.authorId == request.auth.uid;
    }
  }
}
