rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Helper function for create operations.
    // Verifies the incoming document's ID field matches the user's auth UID.
    function isCreatingOwner() {
      return isSignedIn() && request.auth.uid == request.resource.data.id;
    }

    // USERS
    match /users/{userId} {
      allow create: if isCreatingOwner();
      allow read: if isSignedIn();
      allow update: if isOwner(userId);
    }

    // SHOP OWNER PROFILES
    match /shopOwnerProfiles/{userId} {
      allow create: if isCreatingOwner();
      allow read: if isSignedIn();
      allow update: if isOwner(userId);
    }

    // HOMEOWNER PROFILES
    match /homeownerProfiles/{userId} {
      allow create: if isCreatingOwner();
      allow read: if isSignedIn();
      allow update: if isOwner(userId);
    }

    // REQUIREMENTS
    match /requirements/{requirementId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.homeownerId;
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.homeownerId;
    }

    // QUOTATIONS
    match /quotations/{quotationId} {
      allow create, update: if isSignedIn() && request.auth.uid == request.resource.data.shopOwnerId;

      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.shopOwnerId ||
        request.auth.uid == get(/databases/$(database)/documents/requirements/$(resource.data.requirementId)).data.homeownerId
      );
    }

    // UPDATES
    match /updates/{updateId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.authorId;
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.authorId;
    }
  }
}
