rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isLoggedIn() {
      return request.auth != null;
    }

    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      // Allow updating username, but not role or email.
      allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['username', 'profile']);
    }

    match /homeownerProfiles/{userId} {
      allow read: if isLoggedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    match /shopOwnerProfiles/{userId} {
      allow read: if isLoggedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    match /requirements/{requirementId} {
      allow read: if isLoggedIn();
      allow create: if isLoggedIn() && request.resource.data.homeownerId == request.auth.uid;
      allow update, delete: if isLoggedIn() && resource.data.homeownerId == request.auth.uid;
    }
    
    match /quotations/{quotationId} {
      allow read: if isLoggedIn(); // A homeowner can only read quotes for their own requirement, checked in the app logic.
      allow create: if isLoggedIn() && request.resource.data.shopOwnerId == request.auth.uid;
      allow update: if isLoggedIn() && resource.data.shopOwnerId == request.auth.uid;
      // No delete rule for quotations for now
    }

    match /updates/{updateId} {
        allow read: if isLoggedIn();
        allow create: if isLoggedIn() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if isLoggedIn() && resource.data.authorId == request.auth.uid;
    }
  }
}