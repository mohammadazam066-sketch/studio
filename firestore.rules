rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    match /users/{userId} {
      allow read, create: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.role == resource.data.role;
    }
    
    match /homeownerProfiles/{userId} {
      allow read, create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    match /shopOwnerProfiles/{userId} {
      allow read, create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    match /requirements/{requirementId} {
      allow read: if request.auth != null;
      allow create: if isRole('homeowner');
      allow update, delete: if isRole('homeowner') && resource.data.homeownerId == request.auth.uid;
    }
    
    match /quotations/{quotationId} {
      allow create: if isRole('shop-owner');
      allow update: if isRole('shop-owner') && resource.data.shopOwnerId == request.auth.uid;
      allow read: if (isRole('shop-owner') && resource.data.shopOwnerId == request.auth.uid) || 
                     (isRole('homeowner') && get(/databases/$(database)/documents/requirements/$(resource.data.requirementId)).data.homeownerId == request.auth.uid);
    }

    match /updates/{updateId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.authorId == request.auth.uid;
    }
  }
}
